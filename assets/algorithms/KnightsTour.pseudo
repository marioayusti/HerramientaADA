/*--- Algoritmo para el problema de los movimientos del caballo de ajedrez ---*/

function boolean Salto(ES int[][] T, E int n, E int i, E int x, E int y, ES int nx, ES int ny)
{
    case of i
    1: 
        nx <- x - 2
        ny <- y + 1
    2: 
        nx <- x - 1
        ny <- y + 2
    3: 
        nx <- x + 1
        ny <- y + 2        
    4: 
        nx <- x + 2
        ny <- y + 1
    5: 
        nx <- x + 2
        ny <- y - 1
    6: 
        nx <- x + 1
        ny <- y - 2
    7: 
        nx <- x - 1
        ny <- y - 2    
    8: 
        nx <- x - 2
        ny <- y - 1
    endcase      
    return (1 <= nx) and (nx <= n) and (1 <= ny) and (ny <= n) and (T[nx][ny] == 0)
}

function int Cuenta(ES int[][] T, E int n, E int x, E int y)
var
int acc, i, nx, ny
boolean auxSalto
{
    acc <- 0
    for i <- 1 to 8 do
        auxSalto <- Salto(T,n,i,x,y,nx,ny)
        if (auxSalto) then
            acc <- acc + 1
        endif
    endfor
    return acc
}

function boolean NuevoMov(ES int[][]T,E int n, ES int x, ES int y)
var
int accesibles,minaccesibles,i,solx,soly,nuevax,nuevay
boolean auxS
{
    minaccesibles <- 9
    solx <- x
    soly <- y
    for i <- 1 to 8 do
        auxS <- Salto(T,n,i,x,y,nuevax,nuevay)
        if (auxS) then
            accesibles <- Cuenta(T, n, nuevax, nuevay)
            if (accesibles > 0 and accesibles < minaccesibles) then
                minaccesibles <- accesibles
                solx <- nuevax
                soly <- nuevay
            endif
        endif
    endfor
    x <- solx
    y <- soly
    return (minaccesibles < 9)
}

function boolean Caballo(ES int[][] T, E int n, E int x, E int y) 
var
int i
boolean res
boolean auxNM
{
    for i <- 1 to n*n do
        T[x][y] <- i
        auxNM <- NuevoMov(T,n,x,y)
        if (NOT auxNM and (i < (n*n - 1))) then
            res <- false
        endif
    endfor
    return res
}

procedure main() 
var
int n <- 8
int[n][n] T
int x <- 5
int y <- 5
boolean res
{
    res <- Caballo(T,n,x,y)
    show(res)
}